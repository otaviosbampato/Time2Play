datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  idCliente                    Int       @id @default(autoincrement())
  email                        String    @unique
  nome                         String
  senha                        String
  passwordResetToken           String?
  passwordResetTokenExpiration DateTime?
  reservas                     Reserva[]
  reviews                      Review[]
}

model Proprietario {
  idProprietario               Int       @id @default(autoincrement())
  email                        String    @unique
  nome                         String
  senha                        String
  cpfCnpj                      String    @unique
  cidade                       String
  passwordResetToken           String?
  passwordResetTokenExpiration DateTime?
  quadras                      Quadra[]
}

model Quadra {
  idQuadra       Int          @id @default(autoincrement())
  nomeQuadra     String
  precoHora      Float
  cidade         String?
  estado         String?
  endereco       String 
  esporte        String       @default("")
  fotos          Json         @default("[]")
  reviews        Review[]
  proprietario   Proprietario @relation(fields: [proprietarioId], references: [idProprietario])
  proprietarioId Int
  Reserva        Reserva[]
}

// cliente só cria reserva mediante transação.
// proprietário só recebe o valor após 24h do cliente ter usado a quadra
// (é o tempo de reclamação que o cliente possui).
model Reserva {
  idReserva   Int              @id @default(autoincrement())
  data        DateTime         @default(now())
  cliente     Cliente          @relation(fields: [clienteId], references: [idCliente])
  clienteId   Int
  transacao   Transacao        @relation(fields: [transacaoId], references: [idTransacao])
  transacaoId Int              @unique
  quadra      Quadra           @relation(fields: [quadraId], references: [idQuadra])
  quadraId    Int
  horarios    ReservaHorario[]
}

model ReservaHorario {
  idHorario  Int      @id @default(autoincrement())
  dataInicio DateTime
  dataFim    DateTime
  reserva    Reserva  @relation(fields: [reservaId], references: [idReserva])
  reservaId  Int
}

model Transacao {
  idTransacao     Int      @id @default(autoincrement())
  valor           Float
  status          String // concluído, aguardando pagamento, cancelado etc.
  metodoPagamento String
  data            DateTime @default(now())
  reserva         Reserva?
}

//cliente só deve poder fazer review se já reservou a quadra.
model Review {
  idReview   Int      @id @default(autoincrement())
  nota       Float // intervalo de 0-5
  titulo     String
  comentario String
  data       DateTime @default(now())
  quadra     Quadra   @relation(fields: [quadraId], references: [idQuadra])
  quadraId   Int
  cliente    Cliente  @relation(fields: [clienteId], references: [idCliente])
  clienteId  Int
}

enum Status {
  CONCLUIDO
  AGUARDANDO
  CANCELADO
}

generator client {
  provider = "prisma-client-js"
}
